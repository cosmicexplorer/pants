{{{header}}}

# Conditions are documented here: https://docs.travis-ci.com/user/conditions-v1
conditions: v1

env:
  global:
    - PANTS_CONFIG_FILES="${TRAVIS_BUILD_DIR}/pants.travis-ci.ini"
    - PYTEST_PASSTHRU_ARGS="-v --duration=3"
    - LC_ALL="en_US.UTF-8"
    - BOOTSTRAPPED_PEX_BUCKET=ci-public.pantsbuild.org
    - BOOTSTRAPPED_PEX_KEY_PREFIX=${TRAVIS_BUILD_NUMBER}/${TRAVIS_BUILD_ID}/pants.pex
    - BOOTSTRAPPED_PEX_URL_PREFIX=s3://${BOOTSTRAPPED_PEX_BUCKET}/${BOOTSTRAPPED_PEX_KEY_PREFIX}

# Stages are documented here: https://docs.travis-ci.com/user/build-stages
stages:
  - &bootstrap Bootstrap Pants
  - name: &test Test Pants
    if: type != cron
  - name: &cron Cron
    if: type = cron
  - name: &build_stable Deploy Pants Pex
    if: tag IS present AND tag =~ ^release_.*$
  - name: &build_unstable Deploy Pants Pex Unstable
    if: tag IS NOT present AND type NOT IN (pull_request, cron)

# Travis cache config for jobs that build the native engine.
native_engine_cache_config: &native_engine_cache_config
  before_cache:
    # Ensure permissions to do the below removals, which happen with or without caching enabled.
    - sudo chown -R travis:travis "${HOME}" "${TRAVIS_BUILD_DIR}"
    # Kill all python bytecode in our cached venvs.  Some files appear to
    # get bytecode compiled in non-yet-understood circumstances leading to
    # a full cache re-pack due to new bytecode files.
    - find build-support -name "*.py[co]" -delete
  cache:
    # The default timeout is 180 seconds, and our larger cache uploads exceed this.
    # TODO: Figure out why we have such large caches (2-7GB) and try to trim them.
    timeout: 500
    directories:
      - ${HOME}/.cache/pants/rust/cargo
      - build-support/pants_dev_deps.py2.venv
      - build-support/pants_dev_deps.py3.venv
      - src/rust/engine/target

# Travis cache config for jobs that run a bootstrapped pants.pex.
pants_run_cache_config: &pants_run_cache_config
  before_cache:
    # Ensure permissions to do the below removals, which happen with or without caching enabled.
    - sudo chown -R travis:travis "${HOME}" "${TRAVIS_BUILD_DIR}"
    # The `ivydata-*.properties` & root level `*.{properties,xml}` files'
    # effect on resolution time is in the noise, but they are
    # re-timestamped in internal comments and fields on each run and this
    # leads to travis-ci cache thrash.  Kill these files before the cache
    # check to avoid un-needed cache re-packing and re-upload (a ~100s
    # operation).
    - find ${HOME}/.ivy2/pants -type f -name "ivydata-*.properties" -delete
    - rm -f ${HOME}/.ivy2/pants/*.{css,properties,xml,xsl}
    # We have several tests that do local file:// url resolves for
    # com.example artifacts, these disrupt the cache but are fast since
    # they're resolved from local files when omitted from the cache.
    - rm -rf ${HOME}/.ivy2/pants/com.example
    # Render a summary to assist with further tuning the cache.
    - du -m -d2 ${HOME}/.cache/pants | sort -r -n
  cache:
    # The default timeout is 180 seconds, and our larger cache uploads exceed this.
    # TODO: Figure out why we have such large caches (2-7GB) and try to trim them.
    timeout: 500
    directories:
      - ${HOME}/.cache/pants/tools
      - ${HOME}/.cache/pants/zinc
      - ${HOME}/.ivy2/pants
      # TODO(John Sirois): Update this to ~/.npm/pants when pants starts
      # using its own isolated cache:
      #   https://github.com/pantsbuild/pants/issues/2485
      - ${HOME}/.npm

base_linux_config: &base_linux_config
  os: linux
  dist: xenial
  sudo: required
  addons:
    apt:
      packages:
        - lib32stdc++6
        - lib32z1
        - lib32z1-dev
        - gcc-multilib
        - python-dev
        - openssl
        - libssl-dev
        - jq
        - unzip
  language: python
  before_install:
    - ./build-support/bin/install_aws_cli_for_ci.sh
  after_failure:
    - ./build-support/bin/ci-failure.sh

py2_linux_config: &py2_linux_config
  <<: *base_linux_config
  python: &python_version "2.7"

py3_linux_config: &py3_linux_config
  <<: *base_linux_config
  python: &python_version "3.6"

base_linux_test_config: &base_linux_test_config
  <<: *base_linux_config
  <<: *pants_run_cache_config
  stage: *test
  before_install:
    {{>before_install_linux}}
  before_script:
    - ./build-support/bin/get_ci_bootstrapped_pants_pex.sh ${BOOTSTRAPPED_PEX_BUCKET} ${BOOTSTRAPPED_PEX_KEY_PREFIX}.${BOOTSTRAPPED_PEX_KEY_SUFFIX}

py2_linux_test_config: &py2_linux_test_config
  <<: *py2_linux_config
  <<: *base_linux_test_config
  env:
    - BOOTSTRAPPED_PEX_KEY_SUFFIX="py2.linux"

py3_linux_test_config: &py3_linux_test_config
  <<: *py3_linux_config
  <<: *base_linux_test_config
  env:
    - BOOTSTRAPPED_PEX_KEY_SUFFIX="py3.linux"

base_osx_config: &base_osx_config
  os: osx
  language: generic
  # TODO: workaround for Homebrew bug triggered by running `brew update`.
  # Follow at https://github.com/Homebrew/brew/issues/5513 and remove this workaround once its fixed.
  env: &base_osx_config_env
    - HOMEBREW_LOGS=~/homebrew-logs
    - HOMEBREW_TEMP=~/homebrew-temp
  before_install: &base_osx_config_before_install
    {{>before_install_osx}}

py2_osx_config: &py2_osx_config
  <<: *base_osx_config

py3_osx_config: &py3_osx_config
  <<: *base_osx_config
  before_install:
    - <<: *base_osx_config_before_install
    # Upgrade to Python 3
    - brew upgrade python

base_osx_test_config: &base_osx_test_config
  <<: *base_osx_config
  <<: *pants_run_cache_config
  stage: *test
  before_script:
    - ulimit -c unlimited
    - ulimit -n 8192
    - ./build-support/bin/get_ci_bootstrapped_pants_pex.sh ${BOOTSTRAPPED_PEX_BUCKET} ${BOOTSTRAPPED_PEX_KEY_PREFIX}.${BOOTSTRAPPED_PEX_KEY_SUFFIX}

py2_osx_test_config: &py2_osx_test_config
  <<: *py2_osx_config
  <<: *base_osx_test_config
  env:
    - <<: *base_osx_config_env
    - BOOTSTRAPPED_PEX_KEY_SUFFIX="py2.osx"

py3_osx_test_config: &py3_osx_test_config
  <<: *py3_osx_config
  <<: *base_osx_test_config
  env:
    - <<: *base_osx_config_env
    - BOOTSTRAPPED_PEX_KEY_SUFFIX="py3.osx"

base_linux_build_engine: &base_linux_build_engine
  <<: *base_linux_config
  <<: *native_engine_cache_config
  stage: *bootstrap
  services:
    - docker
  env: &base_linux_build_engine_env
    - PREPARE_DEPLOY=1  # To deploy fs_util.
  before_script:
    - ulimit -c unlimited
  script:
    - docker build --rm -t travis_ci
      --build-arg "TRAVIS_USER=$(id -un)"
      --build-arg "TRAVIS_UID=$(id -u)"
      --build-arg "TRAVIS_GROUP=$(id -gn)"
      --build-arg "TRAVIS_GID=$(id -g)"
      build-support/docker/travis_ci/
    # Note that:
    # * We mount ${HOME} to cache the ${HOME}/.cache/pants/rust-toolchain.
    # * With no args ci.sh just bootstraps a pants.pex.
    # * We also build fs_util, to take advantage of the rust code built during bootstrapping.
    - docker run --rm -t
      -v "${HOME}:/travis/home"
      -v "${TRAVIS_BUILD_DIR}:/travis/workdir"
      travis_ci:latest
      sh -c "./build-support/bin/ci.sh && ./build-support/bin/release.sh -f"
    - aws --no-sign-request --region us-east-1 s3 cp ${TRAVIS_BUILD_DIR}/pants.pex ${BOOTSTRAPPED_PEX_URL_PREFIX}.${BOOTSTRAPPED_PEX_KEY_SUFFIX}

py2_linux_build_engine: &py2_linux_build_engine
  <<: *py2_linux_config
  <<: *base_linux_build_engine
  name: "Build Linux native engine and Python 2 pants.pex"
  env:
    - <<: *base_linux_build_engine_env
    - CACHE_NAME=linuxpexbuild_py2
    - BOOTSTRAPPED_PEX_KEY_SUFFIX="py2.linux"

py3_linux_build_engine: &py3_linux_build_engine
  <<: *py3_linux_config
  <<: *base_linux_build_engine
  name: "Build Linux native engine and Python 3 pants.pex"
  env:
    - <<: *base_linux_build_engine_env
    - CACHE_NAME=linuxpexbuild_py3
    - BOOTSTRAPPED_PEX_KEY_SUFFIX="py3.linux"

base_osx_build_engine: &base_osx_build_engine
  <<: *base_osx_config
  <<: *native_engine_cache_config
  stage: *bootstrap
  # We request the oldest image we can (corresponding to OSX 10.11) for maximum compatibility.
  # We use 10.11 as a minimum to avoid https://github.com/rust-lang/regex/issues/489.
  # See: https://docs.travis-ci.com/user/reference/osx/#OS-X-Version
  osx_image: xcode8
  env: &base_osx_build_engine_env
    - PREPARE_DEPLOY=1  # To deploy fs_util.
  script:
    # With no args ci.sh just bootstraps a pants.pex. We also build fs_util, to take advantage
    # of the rust code built during bootstrapping.
    - ./build-support/bin/ci.sh && ./build-support/bin/release.sh -f
    - aws --no-sign-request --region us-east-1 s3 cp ${TRAVIS_BUILD_DIR}/pants.pex ${BOOTSTRAPPED_PEX_URL_PREFIX}.${BOOTSTRAPPED_PEX_KEY_SUFFIX}
  after_failure:
    - ./build-support/bin/ci-failure.sh

py2_osx_build_engine: &py2_osx_build_engine
  <<: *py2_osx_config
  <<: *base_osx_build_engine
  name: "Build OSX native engine and Python 2 pants.pex"
  env:
    - <<: *base_osx_build_engine_env
    - CACHE_NAME=osxpexbuild_py2
    - BOOTSTRAPPED_PEX_KEY_SUFFIX="py2.osx"

py3_osx_build_engine: &py3_osx_build_engine
  <<: *py3_osx_config
  <<: *base_osx_build_engine
  name: "Build OSX native engine and Python 3 pants.pex"
  env:
    - <<: *base_osx_build_engine_env
    - CACHE_NAME=osxpexbuild_py3
    - BOOTSTRAPPED_PEX_KEY_SUFFIX="py3.osx"

linux_with_fuse: &linux_with_fuse
  before_install:
    {{>before_install_linux}}
    - sudo apt-get install -y pkg-config fuse libfuse-dev
    - sudo modprobe fuse
    - sudo chmod 666 /dev/fuse
    - sudo chown root:$USER /etc/fuse.conf

matrix:
  include:
    - <<: *py2_linux_build_engine
    - <<: *py3_linux_build_engine
    - <<: *py2_osx_build_engine
    - <<: *py3_osx_build_engine

    - <<: *py3_linux_test_config
      name: "Build Linux wheels"
      stage: *test
      env:
        - CACHE_NAME=linuxwheelsbuild
        - RUN_PANTS_FROM_PEX=1
        - PREPARE_DEPLOY=1
      script:
        - ./build-support/bin/release.sh -n

    - <<: *py3_osx_test_config
      name: "Build OSX wheels"
      osx_image: xcode8
      env:
        - CACHE_NAME=osxwheelsbuild
        - RUN_PANTS_FROM_PEX=1
        - PREPARE_DEPLOY=1
      script:
        - ./build-support/bin/release.sh -n

    # TODO: Update this to use 10.14 once it is available
    - <<: *py3_osx_test_config
      name: "OSX 10.12 sanity check"
      osx_image: xcode9.2
      env:
        - CACHE_NAME=macos10.12sanity
      script:
        - MODE=debug ./build-support/bin/travis-ci.sh -bm

    - <<: *py3_osx_test_config
      name: "OSX 10.13 sanity check"
      osx_image: xcode10.1
      env:
        - CACHE_NAME=macos10.13sanity
      script:
        - MODE=debug ./build-support/bin/travis-ci.sh -bm

    # Deploy Pex Stable
    - name: "Deploy stable multiplatform pants.pex"
      os: linux
      language: python
      stage: *build_stable
      env:
        - CACHE_NAME=linuxpexdeploystable
        - RUN_PANTS_FROM_PEX=1
        - PANTS_PEX_RELEASE=stable
      script:
        - ./build-support/bin/release.sh -p
      deploy:
        # See https://docs.travis-ci.com/user/deployment/releases/
        provider: releases
        # The pantsbuild-ci-bot OAuth token, see the pantsbuild vault for details.
        api_key:
          secure: "u0aCsiuVGOg28YxG0sQUovuUm29kKwQfFgHbNz2TT5L+cGoHxGl4aoVOCtuwWYEtbNGmYc8/3WRS3C/jOiqQj6JEgHUzWOsnfKUObEqNhisAmXbzBbKc0wPQTL8WNK+DKFh32sD3yPYcw+a5PTLO56+o7rqlI25LK7A17WesHC4="
        file_glob: true
        file: dist/deploy/pex/*
        skip_cleanup: true
        on:
          # We only release a pex for Pants releases, which are tagged.
          tags: true
          repo: pantsbuild/pants

    # Deploy Pex Unstable to s3
    - name: "Deploy unstable multiplatform pants.pex"
      os: linux
      language: python
      stage: *build_unstable
      env:
        - CACHE_NAME=linuxpexdeployunstable
        - RUN_PANTS_FROM_PEX=1
        - PREPARE_DEPLOY=1
      script:
        - ./build-support/bin/release.sh -p && mkdir -p dist/deploy/pex/ && mv dist/pants*.pex dist/deploy/pex/

    - <<: *py3_linux_test_config
      <<: *linux_with_fuse
      name: "Self-checks, lint, and JVM tests"
      env:
        - CACHE_NAME=linuxselfchecks
      script:
        - ./build-support/bin/travis-ci.sh -fbmrjt

    - <<: *py2_linux_test_config
      name: "Py2 - Unit tests for pants and pants-plugins"
      env:
        - CACHE_NAME=linuxunittests.py2
      script:
        - ./build-support/bin/travis-ci.sh -2blp

    - <<: *py3_linux_test_config
      name: "Py3 - Unit tests for pants and pants-plugins"
      env:
        - CACHE_NAME=linuxunittests.py3
      script:
        - ./build-support/bin/travis-ci.sh -blp

    - <<: *py2_linux_test_config
      name: "Py2 - Python contrib tests"
      env:
        - CACHE_NAME=linuxcontribtests.py2
      script:
        - ./build-support/bin/travis-ci.sh -2bn

    - <<: *py3_linux_test_config
      name: "Py3 - Python contrib tests"
      env:
        - CACHE_NAME=linuxcontribtests.py3
      script:
        - ./build-support/bin/travis-ci.sh -bn

{{#integration_shards}}
    - <<: *py3_linux_test_config
      name: "Integration tests for pants - shard {{.}}"
      env:
        - CACHE_NAME=integrationshard{{.}}
      script:
        - ./build-support/bin/travis-ci.sh -bc -i {{.}}/{{integration_shards_length}}

{{/integration_shards}}
{{#integration_shards}}
    - <<: *py2_linux_test_config
      name: "Integration tests for pants (Python 2) - shard {{.}}"
      stage: *cron
      env:
        - CACHE_NAME=cronshard{{.}}
      script:
        - ./build-support/bin/travis-ci.sh -bc2 -i {{.}}/{{integration_shards_length}}

{{/integration_shards}}

    # Rust on linux
    - <<: *linux_with_fuse
      <<: *native_engine_cache_config
      name: "Linux Rust tests"
      env:
        - CACHE_NAME=linuxrusttests
      os: linux
      dist: xenial
      sudo: required
      stage: *test
      language: python
      python: *python_version
      before_script:
        - ulimit -c unlimited
        - ulimit -n 8192
      script:
        - ./build-support/bin/travis-ci.sh -be

    # Rust on macOS
    - <<: *py3_osx_test_config
      name: "OSX Rust + platform-specific tests"
      env:
        - CACHE_NAME=macosrusttests
      # Fuse actually works on this image. It hangs on many others.
      osx_image: xcode8.3
      before_install:
        {{>before_install_osx}}
        - brew tap caskroom/cask && brew update && brew cask install osxfuse
      script:
        - ./build-support/bin/travis-ci.sh -bez

    # Rust Clippy on Linux
    - <<: *linux_with_fuse
      <<: *native_engine_cache_config
      name: "Linux Rust Clippy"
      env:
        - CACHE_NAME=linuxclippy
      os: linux
      dist: xenial
      sudo: required
      stage: *test
      language: python
      python: *python_version
      before_script:
        - ulimit -c unlimited
        - ulimit -n 8192
      script:
        - ./build-support/bin/travis-ci.sh -bs

    # Cargo audit
    - <<: *linux_with_fuse
      name: "Cargo audit"
      env:
        - CACHE_NAME=linuxcargoaudit
      os: linux
      dist: xenial
      sudo: required
      stage: *cron
      script:
        - ./build-support/bin/travis-ci.sh -ba

deploy:
  # Deploy whatever a previous stage has left in dist/deploy.
  # See: https://docs.travis-ci.com/user/deployment/s3/
  provider: s3
  access_key_id: AKIAIWOKBXVU3JLY6EGQ
  secret_access_key:
    secure: "UBVbpdYJ81OsDGKlPRBw6FlPJGlxosnFQ4A1xBbU5GwEBfv90GoKc6J0UwF+I4CDwytj/BlAks1XbW0zYX0oeIlXDnl1Vfikm1k4hfIr6VCLHKppiU69FlEs+ph0Dktz8+aUWhrvJzICZs6Gu08kTBQ5++3ulDWDeTHqjr713YM="
  bucket: binaries.pantsbuild.org
  local_dir: dist/deploy
  # Otherwise travis will stash dist/deploy and the deploy will fail.
  skip_cleanup: true
  acl: public_read
  on:
    condition: $PREPARE_DEPLOY = 1
    # NB: We mainly want deploys for `master` commits; but we also need new binaries for stable
    # release branches; eg `1.3.x`
    all_branches: true
    repo: pantsbuild/pants
