#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class GlobExpansionResultCode(object):
    OK = 1
    ERROR = 2

    _VALUES_TO_NAMES = {
        1: "OK",
        2: "ERROR",
    }

    _NAMES_TO_VALUES = {
        "OK": 1,
        "ERROR": 2,
    }


class StrictGlobMatching(object):
    ERROR = 1
    WARN = 2
    IGNORE = 3

    _VALUES_TO_NAMES = {
        1: "ERROR",
        2: "WARN",
        3: "IGNORE",
    }

    _NAMES_TO_VALUES = {
        "ERROR": 1,
        "WARN": 2,
        "IGNORE": 3,
    }


class Conjunction(object):
    ALL_MATCH = 1
    ANY_MATCH = 2

    _VALUES_TO_NAMES = {
        1: "ALL_MATCH",
        2: "ANY_MATCH",
    }

    _NAMES_TO_VALUES = {
        "ALL_MATCH": 1,
        "ANY_MATCH": 2,
    }


class MessageId(object):
    """
    Attributes:
     - id

    """


    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MessageId')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FileWithContentsDescriptor(object):
    """
    Attributes:
     - path
     - contents_start
     - contents_end

    """


    def __init__(self, path=None, contents_start=None, contents_end=None,):
        self.path = path
        self.contents_start = contents_start
        self.contents_end = contents_end

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.contents_start = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.contents_end = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FileWithContentsDescriptor')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.contents_start is not None:
            oprot.writeFieldBegin('contents_start', TType.I64, 2)
            oprot.writeI64(self.contents_start)
            oprot.writeFieldEnd()
        if self.contents_end is not None:
            oprot.writeFieldBegin('contents_end', TType.I64, 3)
            oprot.writeI64(self.contents_end)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GlobExpansionComplete(object):
    """
    Attributes:
     - message_id
     - status
     - all_files
     - error_text

    """


    def __init__(self, message_id=None, status=None, all_files=None, error_text=None,):
        self.message_id = message_id
        self.status = status
        self.all_files = all_files
        self.error_text = error_text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.message_id = MessageId()
                    self.message_id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.all_files = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = FileWithContentsDescriptor()
                        _elem5.read(iprot)
                        self.all_files.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.error_text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GlobExpansionComplete')
        if self.message_id is not None:
            oprot.writeFieldBegin('message_id', TType.STRUCT, 1)
            self.message_id.write(oprot)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.all_files is not None:
            oprot.writeFieldBegin('all_files', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.all_files))
            for iter6 in self.all_files:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.error_text is not None:
            oprot.writeFieldBegin('error_text', TType.STRING, 4)
            oprot.writeString(self.error_text.encode('utf-8') if sys.version_info[0] == 2 else self.error_text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PathGlobs(object):
    """
    Attributes:
     - include_patterns
     - exclude_patterns
     - strictness
     - conjunction

    """


    def __init__(self, include_patterns=None, exclude_patterns=None, strictness=None, conjunction=None,):
        self.include_patterns = include_patterns
        self.exclude_patterns = exclude_patterns
        self.strictness = strictness
        self.conjunction = conjunction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.include_patterns = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.include_patterns.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.exclude_patterns = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.exclude_patterns.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.strictness = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.conjunction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PathGlobs')
        if self.include_patterns is not None:
            oprot.writeFieldBegin('include_patterns', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.include_patterns))
            for iter19 in self.include_patterns:
                oprot.writeString(iter19.encode('utf-8') if sys.version_info[0] == 2 else iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.exclude_patterns is not None:
            oprot.writeFieldBegin('exclude_patterns', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.exclude_patterns))
            for iter20 in self.exclude_patterns:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.strictness is not None:
            oprot.writeFieldBegin('strictness', TType.I32, 3)
            oprot.writeI32(self.strictness)
            oprot.writeFieldEnd()
        if self.conjunction is not None:
            oprot.writeFieldBegin('conjunction', TType.I32, 4)
            oprot.writeI32(self.conjunction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExpandGlobsMessage(object):
    """
    Attributes:
     - message_id
     - path_globs

    """


    def __init__(self, message_id=None, path_globs=None,):
        self.message_id = message_id
        self.path_globs = path_globs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.message_id = MessageId()
                    self.message_id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.path_globs = PathGlobs()
                    self.path_globs.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExpandGlobsMessage')
        if self.message_id is not None:
            oprot.writeFieldBegin('message_id', TType.STRUCT, 1)
            self.message_id.write(oprot)
            oprot.writeFieldEnd()
        if self.path_globs is not None:
            oprot.writeFieldBegin('path_globs', TType.STRUCT, 2)
            self.path_globs.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(MessageId)
MessageId.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
)
all_structs.append(FileWithContentsDescriptor)
FileWithContentsDescriptor.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
    (2, TType.I64, 'contents_start', None, None, ),  # 2
    (3, TType.I64, 'contents_end', None, None, ),  # 3
)
all_structs.append(GlobExpansionComplete)
GlobExpansionComplete.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'message_id', [MessageId, None], None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.LIST, 'all_files', (TType.STRUCT, [FileWithContentsDescriptor, None], False), None, ),  # 3
    (4, TType.STRING, 'error_text', 'UTF8', None, ),  # 4
)
all_structs.append(PathGlobs)
PathGlobs.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'include_patterns', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.LIST, 'exclude_patterns', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I32, 'strictness', None, None, ),  # 3
    (4, TType.I32, 'conjunction', None, None, ),  # 4
)
all_structs.append(ExpandGlobsMessage)
ExpandGlobsMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'message_id', [MessageId, None], None, ),  # 1
    (2, TType.STRUCT, 'path_globs', [PathGlobs, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
