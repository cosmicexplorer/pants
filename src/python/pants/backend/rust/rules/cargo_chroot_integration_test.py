# Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import json
import subprocess
from dataclasses import dataclass
from pathlib import Path
from textwrap import dedent

from pants.backend.rust.rules.cargo_chroot import CreateCargoChroot
from pants.backend.rust.rules.cargo_chroot import rules as cargo_chroot_rules
from pants.backend.rust.subsystems.binaries.rust_toolchain import rules as rust_toolchain_rules
from pants.backend.rust.subsystems.binaries.rust_toolchain import RustToolchain
from pants.backend.rust.target_types import CargoProject
from pants.base.payload import Payload
from pants.build_graph.build_file_aliases import BuildFileAliases
from pants.build_graph.target import Target as V1Target
from pants.core.util_rules.archive import rules as archive_rules
from pants.core.util_rules.distdir import rules as dist_dir_rules
from pants.core.util_rules.external_tool import rules as external_tool_rules
from pants.engine.console import Console
from pants.engine.fs import (
    EMPTY_DIGEST,
    Digest,
    DirectoryToMaterialize,
    FileContent,
    InputFilesContent,
    MaterializeDirectoriesResult,
    MaterializeDirectoryResult,
    SingleFileExecutable,
    Snapshot,
    Workspace,
)
from pants.engine.goal import Goal, GoalSubsystem
from pants.engine.platform import Platform
from pants.engine.rules import RootRule, goal_rule
from pants.engine.selectors import Get
from pants.fs.fs import is_child_of
from pants.testutil.goal_rule_test_base import GoalRuleTestBase
from pants.testutil.test_base import TestBase


# TODO: Remove the need to stub out a V1 target to test a V2-only ruleset!
class CargoProjectV1(V1Target):
    def __init__(self, address=None, sources=None, payload=None, **kwargs) -> None:
        payload = payload or Payload()
        payload.add_fields(
            {"sources": self.create_sources_field(sources, address.spec_path, key_arg="sources")},
        )

        super().__init__(address=address, payload=payload, **kwargs)


class CargoChrootCreationTest(GoalRuleTestBase):
    """Test that we can execute a cargo build inside of a chroot for an example Cargo.toml."""

    goal_cls = CreateCargoChroot

    @classmethod
    def rules(cls):
        return [
            *super().rules(),
            *archive_rules(),
            *external_tool_rules(),
            *rust_toolchain_rules(),
            *dist_dir_rules(),
            *cargo_chroot_rules(),
        ]

    @classmethod
    def target_types(cls):
        return [*super().target_types(), CargoProject]

    @classmethod
    def alias_groups(cls) -> BuildFileAliases:
        return BuildFileAliases(
            targets={
                'cargo_project': CargoProjectV1,
            },
        )

    def _create_minimal_cargo_project(self):
        package_name = 'example_package'
        package_version = '0.1.0'

        cargo_toml = dedent(f"""\
        [package]
        name = "{package_name}"
        version = "{package_version}"
        edition = "2018"

        [dependencies]
        bytes = "0.5.4"
        """)
        self.create_file('ex/Cargo.toml', contents=cargo_toml)

        cargo_lock = dedent(f"""\
        # This file is automatically @generated by Cargo.
        # It is not intended for manual editing.
        [[package]]
        name = "bytes"
        version = "0.5.4"
        source = "registry+https://github.com/rust-lang/crates.io-index"

        [[package]]
        name = "{package_name}"
        version = "{package_version}"
        dependencies = [
         "bytes",
        ]

        [metadata]
        "checksum bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)" = "130aac562c0dd69c56b3b1cc8ffd2e17be31d0b6c25b61c96b76231aa23e39e1"
        """)
        self.create_file('ex/Cargo.lock', contents=cargo_lock)

        lib_rs = dedent("""\
        #[cfg(test)]
        mod tests {
            #[test]
            fn it_works() {
                assert_eq!(2 + 2, 4);
            }
        }
        """)
        self.create_file('ex/src/lib.rs', contents=lib_rs)

        self.add_to_build_file(
            relpath='ex',
            target=dedent("""\
            cargo_project(sources=['Cargo.lock', 'Cargo.toml', 'src/lib.rs'])
            """)
        )

    def test_valid_chroot_is_created(self):
        self._create_minimal_cargo_project()

        result = self.execute_rule(
            args=['ex:ex'],
            global_args=['--backend-packages2=pants.backend.rust'])
        assert result.return_code == 0, f'result was: {result}'
        chroot_location = Path(result.stdout.strip())
        assert chroot_location.is_dir()

        # Execute `cargo metadata --offline` in order to validate that the chroot contained all the
        # necessary packages.
        metadata_output = subprocess.check_output(
            dedent("""\
            export PATH="$(pwd)/cargo/bin"
            export RUSTUP_HOME="$(pwd)/rustup"
            export CARGO_HOME="$(pwd)/cargo"
            cargo metadata --format-version 1 --frozen --offline --locked
            """),
            cwd=chroot_location,
            shell=True)
        metadata_json = json.loads(metadata_output)
        (ex_pkg, bytes_pkg) = tuple(metadata_json['packages'])
        assert ex_pkg['name'] == 'example_package'
        assert bytes_pkg['name'] == 'bytes'
