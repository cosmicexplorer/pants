# coding=utf-8
# Copyright 2018 Pants project contributors (see CONTRIBUTORS.md).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

from __future__ import absolute_import, division, print_function, unicode_literals

from pants.base.payload import Payload
from pants.base.payload_field import PrimitiveField, PrimitivesSetField
from pants.build_graph.target import Target


class PackagedNativeLibrary(Target):
  """A container for headers and libraries from external sources.

  This target type is intended to be generated by a codegen task to wrap various sources of C/C++
  packages in a homogenous container. It can also be used to wrap native libraries which are checked
  into the repository -- the `sources` argument does not allow files outside of the buildroot.
  """

  @classmethod
  def alias(cls):
    return 'packaged_native_library'

  def __init__(self, address, payload=None, sources=None, include_relpath=None, lib_relpath=None,
               native_lib_names=None, **kwargs):
    if not payload:
      payload = Payload()
    payload.add_fields({
      'sources': self.create_sources_field(sources, address.spec_path, key_arg='sources'),
      'include_relpath': PrimitiveField(include_relpath),
      'lib_relpath': PrimitiveField(lib_relpath),
      'native_lib_names': PrimitivesSetField(native_lib_names),
    })
    super(PackagedNativeLibrary, self).__init__(address=address, payload=payload, **kwargs)

  @property
  def include_relpath(self):
    return self.payload.include_relpath

  @property
  def lib_relpath(self):
    return self.payload.lib_relpath

  @property
  def native_lib_names(self):
    return self.payload.native_lib_names
